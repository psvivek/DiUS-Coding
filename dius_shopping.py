# -*- coding: utf-8 -*-
"""DiUS_Shopping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K7ZFL0W_LuUqICpT-kmFtK_BovUUi-mH
"""

from enum import Enum, unique

# @unique is used to check whether SKU's are unique.
@unique
class Products(Enum):
    """ All our products will be added here."""
    ipd = {
          "SKU": "ipd",
          "Name": "Super iPad", 
          "Price": 549.99
      }
      
    mbp = {
        "SKU": "mbp",
        "Name": "MacBook Pro", 
        "Price": 1399.99
    }
    
    atv = {
        "SKU": "atv",
        "Name": "Apple TV", 
        "Price": 109.50
    }
    
    vga = {
        "SKU": "vga",
        "Name": "VGA adapter", 
        "Price": 30.00
    }

# Create bulk rule for iPad and deal rule for Apple TVs. 
# This enhances code reusability.
class Rules():
    def __init__(self):
        self.bulk_nums = 4
        self.bulk_discount = 50.0
        
        self.deal_on = 3
        self.pay_for = 2
    
    def bulk_rule(self, total_items, price):
        if total_items > self.bulk_nums:
            return total_items * (price - self.bulk_discount)
        
        return total_items * price    
    
    def deal_rule(self, total_items, price):
        deal_on = self.deal_on
        pay_for = self.pay_for
        
        num_deals = total_items // deal_on
        
        num_payable_items = (pay_for * num_deals) + (total_items % deal_on)
        
        return num_payable_items * price

# Method to implement Price rules that uses Rules class.
def pricingRules(items_dict):
    if len(items_dict) == 0:
        return 0.0
    
    total_price = 0.0
    
    rules = Rules()
    
    for item, nums in items_dict.items():
        if item == 'mbp':
            items_price = nums * Products.mbp.value["Price"]
        elif item == "vga":
            num_mbp = items_dict.get("mbp", 0)
            vga_payable = max(0, nums-num_mbp)
            items_price = vga_payable * Products.vga.value["Price"]
        elif item == "ipd":
            items_price = rules.bulk_rule(nums, Products.ipd.value["Price"])
        elif item == "atv":
            items_price = rules.deal_rule(nums, Products.atv.value["Price"])
        
        total_price += items_price
    
    return total_price

# Class to scan the items and calculate total.
class Checkout():
    def __init__(self, pricingRules):
        self.pricingRules = pricingRules
        self.items_dict = {}
        
    def scan(self, item):        
        if item in self.items_dict:
            self.items_dict[item] += 1
        else:
            self.items_dict[item] = 1
        
    def total(self):
        return "${}".format(self.pricingRules(self.items_dict))

# Test case 1
co = Checkout(pricingRules)

co.scan('atv')
co.scan('atv')
co.scan('atv')
co.scan('vga')

print('Test case 1:',co.total())

# Test case 2
co = Checkout(pricingRules)

co.scan('atv')
co.scan('ipd')
co.scan('ipd')
co.scan('atv')
co.scan('ipd')
co.scan('ipd')
co.scan('ipd')

print('Test case 2:',co.total())

# Test case 3
co = Checkout(pricingRules)

co.scan('mbp')
co.scan('vga')
co.scan('ipd')

print('Test case 3:',co.total())

# Test case 4
co = Checkout(pricingRules)

co.scan('atv')
co.scan('atv')
co.scan('atv')
co.scan('ipd')
co.scan('ipd')
co.scan('ipd')
co.scan('ipd')
co.scan('mbp')
co.scan('vga')
co.scan('vga')
co.scan('ipd')

print('Test case 4:',co.total())

# Test case 5
co = Checkout(pricingRules)

co.scan('mbp')
co.scan('mbp')
co.scan('atv')
co.scan('ipd')
co.scan('ipd')
co.scan('ipd')
co.scan('ipd')
co.scan('mbp')
co.scan('vga')
co.scan('vga')
co.scan('ipd')

print('Test case 5:',co.total())

